#!/usr/bin/env python3
"""
Gemini TTS CLI Module
Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i b·∫±ng Gemini AI
"""

import os
import wave
import argparse
import sys
from google import genai
from google.genai import types
import tempfile
import shutil
from datetime import datetime
from pathlib import Path


class GeminiTTSCLI:
    def __init__(self, api_key=None):
        """Kh·ªüi t·∫°o ·ª©ng d·ª•ng TTS v·ªõi Gemini API"""
        self.api_key = api_key or os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("‚ùå C·∫ßn cung c·∫•p GEMINI_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c tham s·ªë --api-key")
        
        self.client = genai.Client(api_key=self.api_key)
        
        # Danh s√°ch 30 voice options t·ª´ t√†i li·ªáu
        self.voice_options = [
            "Zephyr", "Puck", "Charon", "Kore", "Fenrir", "Leda", "Orus", "Aoede",
            "Callirrhoe", "Autonoe", "Enceladus", "Iapetus", "Umbriel", "Algieba",
            "Despina", "Erinome", "Algenib", "Rasalgethi", "Laomedeia", "Achernar",
            "Alnilam", "Schedar", "Gacrux", "Pulcherrima", "Achird", "Zubenelgenubi",
            "Vindemiatrix", "Sadachbia", "Sadaltager", "Sulafat"
        ]
        
        # Model options
        self.models = {
            "gemini-2.5-pro-preview-tts": "Gemini 2.5 Pro Preview TTS",
            "gemini-2.5-flash-preview-tts": "Gemini 2.5 Flash Preview TTS"
        }
        
        # Style Prompt Presets
        self.style_presets = {
            "default": "",
            "tv-host": "Speak like a professional TV host with energy and clarity",
            "storyteller": "Narrate like a captivating storyteller with dramatic expression",
            "news": "Read like a news anchor with authority and clarity",
            "podcast": "Speak like an engaging podcast host with warmth",
            "audiobook": "Narrate like a professional audiobook reader with steady pace",
            "cheerful": "Say cheerfully with positive energy",
            "bedtime": "Read like a gentle bedtime story with soft voice",
            "dramatic": "Express dramatically with varying emotions and pauses",
            "teacher": "Speak like a wise teacher with clear explanation",
            "poetry": "Read like poetry recital with artistic expression",
            "spooky": "Speak in a spooky whisper with mysterious tone",
            "fast": "Speak at a fast pace with excitement",
            "slow": "Speak slowly and clearly with emphasis",
            "motivational": "Speak like a motivational speaker with inspiration",
            "meditation": "Speak as a meditation guide with calm peaceful voice"
        }

    def save_wave_file(self, filename, pcm_data, channels=1, rate=24000, sample_width=2):
        """L∆∞u d·ªØ li·ªáu PCM th√†nh file WAV"""
        with wave.open(filename, "wb") as wf:
            wf.setnchannels(channels)
            wf.setsampwidth(sample_width)
            wf.setframerate(rate)
            wf.writeframes(pcm_data)

    def create_output_filename(self, prefix="gemini_tts", extension="wav"):
        """T·∫°o t√™n file output v·ªõi timestamp"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"{prefix}_{timestamp}.{extension}"

    def generate_single_speaker(self, text, model="gemini-2.5-flash-preview-tts", 
                               voice="Kore", style=None, output_file=None):
        """T·∫°o audio TTS cho single speaker"""
        try:
            # √Åp d·ª•ng style n·∫øu c√≥
            final_text = text
            if style and style in self.style_presets:
                style_prompt = self.style_presets[style]
                if style_prompt:
                    final_text = f"{style_prompt}: {text}"
                    print(f"üé≠ √Åp d·ª•ng style: {style}")

            print(f"ü§ñ S·ª≠ d·ª•ng model: {self.models.get(model, model)}")
            print(f"üéµ S·ª≠ d·ª•ng voice: {voice}")
            print("‚è≥ ƒêang t·∫°o audio...")

            response = self.client.models.generate_content(
                model=model,
                contents=final_text,
                config=types.GenerateContentConfig(
                    response_modalities=["AUDIO"],
                    speech_config=types.SpeechConfig(
                        voice_config=types.VoiceConfig(
                            prebuilt_voice_config=types.PrebuiltVoiceConfig(
                                voice_name=voice,
                            ),
                        ),
                    ),
                ),
            )

            # L·∫•y d·ªØ li·ªáu audio
            audio_data = response.candidates[0].content.parts[0].inline_data.data
            
            # T·∫°o t√™n file output
            if not output_file:
                output_file = self.create_output_filename("single_speaker")
            
            # L∆∞u file
            self.save_wave_file(output_file, audio_data)
            print(f"‚úÖ Audio ƒë√£ ƒë∆∞·ª£c l∆∞u: {output_file}")
            return output_file

        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")
            return None

    def generate_multi_speaker(self, text, speaker1_name, voice1, speaker2_name, voice2,
                              model="gemini-2.5-flash-preview-tts", output_file=None):
        """T·∫°o audio TTS cho multi-speaker"""
        try:
            # Validate speakers trong text
            if not (speaker1_name in text and speaker2_name in text):
                print(f"‚ùå Text ph·∫£i ch·ª©a t√™n c·ªßa c·∫£ hai speaker: {speaker1_name} v√† {speaker2_name}")
                return None

            print(f"ü§ñ S·ª≠ d·ª•ng model: {self.models.get(model, model)}")
            print(f"üë• Speaker 1: {speaker1_name} ({voice1})")
            print(f"üë• Speaker 2: {speaker2_name} ({voice2})")
            print("‚è≥ ƒêang t·∫°o audio multi-speaker...")

            response = self.client.models.generate_content(
                model=model,
                contents=text,
                config=types.GenerateContentConfig(
                    response_modalities=["AUDIO"],
                    speech_config=types.SpeechConfig(
                        multi_speaker_voice_config=types.MultiSpeakerVoiceConfig(
                            speaker_voice_configs=[
                                types.SpeakerVoiceConfig(
                                    speaker=speaker1_name,
                                    voice_config=types.VoiceConfig(
                                        prebuilt_voice_config=types.PrebuiltVoiceConfig(
                                            voice_name=voice1,
                                        ),
                                    ),
                                ),
                                types.SpeakerVoiceConfig(
                                    speaker=speaker2_name,
                                    voice_config=types.VoiceConfig(
                                        prebuilt_voice_config=types.PrebuiltVoiceConfig(
                                            voice_name=voice2,
                                        ),
                                    ),
                                ),
                            ]
                        ),
                    ),
                ),
            )

            # L·∫•y d·ªØ li·ªáu audio
            audio_data = response.candidates[0].content.parts[0].inline_data.data
            
            # T·∫°o t√™n file output
            if not output_file:
                output_file = self.create_output_filename("multi_speaker")
            
            # L∆∞u file
            self.save_wave_file(output_file, audio_data)
            print(f"‚úÖ Audio multi-speaker ƒë√£ ƒë∆∞·ª£c l∆∞u: {output_file}")
            return output_file

        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")
            return None

    def list_voices(self):
        """Hi·ªÉn th·ªã danh s√°ch c√°c voice c√≥ s·∫µn"""
        print("üéµ Danh s√°ch voices c√≥ s·∫µn:")
        for i, voice in enumerate(self.voice_options, 1):
            print(f"  {i:2d}. {voice}")

    def list_styles(self):
        """Hi·ªÉn th·ªã danh s√°ch style presets"""
        print("üé≠ Danh s√°ch style presets:")
        for key, description in self.style_presets.items():
            if description:
                print(f"  {key:15s} - {description}")
            else:
                print(f"  {key:15s} - M·∫∑c ƒë·ªãnh")

    def list_models(self):
        """Hi·ªÉn th·ªã danh s√°ch models c√≥ s·∫µn"""
        print("ü§ñ Danh s√°ch models c√≥ s·∫µn:")
        for model_id, name in self.models.items():
            print(f"  {model_id}")
            print(f"    -> {name}")


def main():
    parser = argparse.ArgumentParser(
        description="üéôÔ∏è Gemini TTS CLI - Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  # Single speaker c∆° b·∫£n
  python gemini_tts.py single "Xin ch√†o, ƒë√¢y l√† Gemini TTS"
  
  # Single speaker v·ªõi style v√† voice
  python gemini_tts.py single "Tin t·ª©c h√¥m nay" --voice Kore --style news
  
  # Multi-speaker
  python gemini_tts.py multi "John: Ch√†o b·∫°n!\\nMary: Ch√†o John!" --speaker1 John --voice1 Puck --speaker2 Mary --voice2 Kore
  
  # ƒê·ªçc t·ª´ file
  python gemini_tts.py single --input script.txt --output output.wav
  
  # Hi·ªÉn th·ªã danh s√°ch
  python gemini_tts.py --list-voices
  python gemini_tts.py --list-styles
        """
    )

    # Global arguments
    parser.add_argument('--api-key', help='Gemini API key (ho·∫∑c d√πng bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY)')
    parser.add_argument('--list-voices', action='store_true', help='Hi·ªÉn th·ªã danh s√°ch voices')
    parser.add_argument('--list-styles', action='store_true', help='Hi·ªÉn th·ªã danh s√°ch style presets')
    parser.add_argument('--list-models', action='store_true', help='Hi·ªÉn th·ªã danh s√°ch models')
    
    # Subcommands
    subparsers = parser.add_subparsers(dest='command', help='Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông')
    
    # Single speaker command
    single_parser = subparsers.add_parser('single', help='T·∫°o audio single speaker')
    single_parser.add_argument('text', nargs='?', help='VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi')
    single_parser.add_argument('--input', '-i', help='File vƒÉn b·∫£n input')
    single_parser.add_argument('--output', '-o', help='File audio output')
    single_parser.add_argument('--voice', '-v', default='Kore', help='T√™n voice (m·∫∑c ƒë·ªãnh: Kore)')
    single_parser.add_argument('--style', '-s', help='Style preset')
    single_parser.add_argument('--model', '-m', default='gemini-2.5-flash-preview-tts', 
                              help='Model ID (m·∫∑c ƒë·ªãnh: gemini-2.5-flash-preview-tts)')
    
    # Multi-speaker command
    multi_parser = subparsers.add_parser('multi', help='T·∫°o audio multi-speaker')
    multi_parser.add_argument('text', nargs='?', help='VƒÉn b·∫£n h·ªôi tho·∫°i')
    multi_parser.add_argument('--input', '-i', help='File vƒÉn b·∫£n input')
    multi_parser.add_argument('--output', '-o', help='File audio output')
    multi_parser.add_argument('--speaker1', required=True, help='T√™n speaker 1')
    multi_parser.add_argument('--voice1', required=True, help='Voice cho speaker 1')
    multi_parser.add_argument('--speaker2', required=True, help='T√™n speaker 2')
    multi_parser.add_argument('--voice2', required=True, help='Voice cho speaker 2')
    multi_parser.add_argument('--model', '-m', default='gemini-2.5-flash-preview-tts',
                              help='Model ID (m·∫∑c ƒë·ªãnh: gemini-2.5-flash-preview-tts)')

    args = parser.parse_args()

    try:
        # Kh·ªüi t·∫°o TTS client
        tts = GeminiTTSCLI(api_key=args.api_key)
        
        # Handle list commands
        if args.list_voices:
            tts.list_voices()
            return
        
        if args.list_styles:
            tts.list_styles()
            return
            
        if args.list_models:
            tts.list_models()
            return

        # Validate command
        if not args.command:
            parser.print_help()
            return

        # Get text input
        text = None
        if hasattr(args, 'input') and args.input:
            if not Path(args.input).exists():
                print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {args.input}")
                return
            with open(args.input, 'r', encoding='utf-8') as f:
                text = f.read().strip()
        elif hasattr(args, 'text') and args.text:
            text = args.text
        else:
            print("‚ùå C·∫ßn cung c·∫•p vƒÉn b·∫£n qua tham s·ªë ho·∫∑c file --input")
            return

        if not text:
            print("‚ùå VƒÉn b·∫£n tr·ªëng")
            return

        # Execute command
        if args.command == 'single':
            # Validate voice
            if args.voice not in tts.voice_options:
                print(f"‚ùå Voice kh√¥ng h·ª£p l·ªá: {args.voice}")
                print("S·ª≠ d·ª•ng --list-voices ƒë·ªÉ xem danh s√°ch")
                return
            
            # Validate style
            if args.style and args.style not in tts.style_presets:
                print(f"‚ùå Style kh√¥ng h·ª£p l·ªá: {args.style}")
                print("S·ª≠ d·ª•ng --list-styles ƒë·ªÉ xem danh s√°ch")
                return
            
            result = tts.generate_single_speaker(
                text=text,
                model=args.model,
                voice=args.voice,
                style=args.style,
                output_file=args.output
            )
            
        elif args.command == 'multi':
            # Validate voices
            if args.voice1 not in tts.voice_options:
                print(f"‚ùå Voice1 kh√¥ng h·ª£p l·ªá: {args.voice1}")
                return
            if args.voice2 not in tts.voice_options:
                print(f"‚ùå Voice2 kh√¥ng h·ª£p l·ªá: {args.voice2}")
                return
            
            result = tts.generate_multi_speaker(
                text=text,
                speaker1_name=args.speaker1,
                voice1=args.voice1,
                speaker2_name=args.speaker2,
                voice2=args.voice2,
                model=args.model,
                output_file=args.output
            )

    except ValueError as e:
        print(str(e))
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ƒê√£ h·ªßy b·ªè")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()
